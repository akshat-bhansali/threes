// import React from 'react'
// import { useLoader } from '@react-three/fiber'
// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

// const Cottage = () => {
//     // https://gltf.pmnd.rs....use to make model => jsx
//     const gltf = useLoader(GLTFLoader, './models/untitled.glb')
//     console.log(gltf);
//     gltf.scene.traverse((object)=>{
//         if(object.isMesh){
//             object.castShadow = true;
//         }
//     })
//     return <primitive object={gltf.scene} />
// }

// export default Cottage

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
    Cube001: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    cottage_texture: THREE.MeshPhysicalMaterial;
  };
};

export default function Cottage(props) {
  // https://gltf.pmnd.rs....use to make model => jsx
  const { nodes, materials } = useGLTF("./models/untitled.glb") as GLTFResult;

  const [color, setColor] = useState("blue");
  return (
    <>
      <group rotation={[0, 4, 0]}>
              <group  dispose={null} position={[60, 0, 20]}>
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes.Cube.geometry}
                  material={materials.Material}
                />
                <mesh
                  onClick={() => {
              setColor("green");
            }}
                  castShadow
                  receiveShadow
                  geometry={nodes.Cube001.geometry}
                  material={materials.cottage_texture}
                  material-color={color}
                  position={[-1.66, 3.656, 0.024]}
                  rotation={[Math.PI, -0.071, Math.PI]}
                  scale={[14.265, 3.592, 8.064]}
                />
              </group>
              <group  dispose={null} position={[20, 0, 20]}>
                <mesh
                  castShadow
                  receiveShadow
                  geometry={nodes.Cube.geometry}
                  material={materials.Material}
                />
                <mesh
                  onClick={() => {
              setColor("green");
            }}
                  castShadow
                  receiveShadow
                  geometry={nodes.Cube001.geometry}
                  material={materials.cottage_texture}
                  material-color={color}
                  position={[-1.66, 3.656, 0.024]}
                  rotation={[Math.PI, -0.071, Math.PI]}
                  scale={[14.265, 3.592, 8.064]}
                />
              </group>
      </group>
    </>
  );
}

useGLTF.preload("./models/untitled.glb");
